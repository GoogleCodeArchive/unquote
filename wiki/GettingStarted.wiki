#summary Quick steps for installing and using Unquote.
#labels Featured

= Getting Started =

== Installation == 

Unquote targets the .NET 4.0 runtime and depends on FSharp.Core version 4.0.0.0. 

To use Unquote within an F# unit testing project, you must obtain and add a reference to Unquote.dll. There are two ways to obtain Unquote:

  * Install the latest version of the [http://www.nuget.org/List/Packages/Unquote Unquote NuGet package] to your unit testing project, this will automatically add a reference to Unquote.dll
  * Download and unzip the featured release of Unquote from the [http://code.google.com/p/unquote/downloads/list Downloads] page and then locate and add a reference to Unquote.dll via the Visual Studio Add Reference dialog.

You must also obtain and install your unit testing framework of choice, NUnit and xUnit having been given special support.

To use Unquote within FSI, locate and add a reference to Unquote.dll using the `#r` directive.

== User Guide ==

The `Swensen.Unquote` namespace contains three `AutoOpen` modules: `Assertions`, `Operators`, and `Extensions`. Therefore you may choose to bring all of Unquote's features into top-level scope simply by opening `Swensen.Unquote` or you may choose to open individual modules or even alias individual modules for a finer level of control.

=== Assertions ===

The `Swensen.Unquote.Assertions` module contains all functions used for performing unit testing assertions. These include `test`, `raises`, and the `xx?` series of binary infix operators. All of these operators can be used within a unit test enabled project or FSI.

Unquote chooses its output source as follows
  * if the INTERACTIVE compiler symbol defined, then output to FSI
  * else if xUnit or NUnit loaded in currently executing assembly, then use appropriate test failed methods
  * else throw a `System.Exception` with a message

The following is a reference of the functions available and some examples:

  * `val inline test : Quotations.Expr<bool> -> unit`
{{{
> test <@ (1+2)/3 = 1 @>;;
val it : unit = ()
> test <@ (1+2)/3 = 2 @>;;

Test failed:
	
(1 + 2) / 3 = 2
3 / 3 = 2
1 = 2
false

val it : unit = ()
}}}

  * `val inline ( =? ) : 'a -> 'a -> unit when 'a : equality`
{{{
> [1;2;3;4] =? [4;3;2;1];;

Test failed:

[1; 2; 3; 4] = [4; 3; 2; 1]
false

val it : unit = ()
}}}
  * `val inline ( <? ) : 'a -> 'a -> unit when 'a : comparison`
  * `val inline ( >? ) : 'a -> 'a -> unit when 'a : comparison`
  * `val inline ( <=? ) : 'a -> 'a -> unit when 'a : comparison`
  * `val inline ( >=? ) : 'a -> 'a -> unit when 'a : comparison`
  * `val inline ( <>? ) : 'a -> 'a -> unit when 'a : equality`
  * `val inline raises<'a when 'a :> exn> : Quotations.Expr -> unit`
{{{
> raises<exn> <@ (null:string).Length @>;;
val it : unit = ()
> raises<NullReferenceException> <@ (null:string).Length @>;;
val it : unit = ()
> raises<System.ArgumentException> <@ (null:string).Length @>;;

Test failed:

Expected ArgumentException but got NullReferenceException

null.Length
System.NullReferenceException: Object reference not set to an instance of an object.

val it : unit = ()
> raises<exn> <@ 3 @>;;

Test failed:

Expected Exception but got nothing

3

val it : unit = ()
}}}

=== Operators ===

The `Swensen.Unquote.Operators` module contains additional functions for decompiling, evaluating, and reducing quotation expressions. The following is a reference of the functions available and some examples:

  * `val decompile : Quotations.Expr -> string`
{{{
> decompile <@ (1+2)/3 @>;;
val it : string = "(1 + 2) / 3"
}}}

  * `val eval : Quotations.Expr<'a> -> 'a`
{{{
> eval <@ "Hello World".Length + 20 @>;;
val it : int = 31
}}}

  * `val evalRaw : Quotations.Expr -> obj`
{{{
> evalRaw <@@ "Hello World".Length + 20 @@>;;
val it : obj = 31
}}}

  * `val reduce : Quotations.Expr -> Quotations.Expr`
{{{
> <@ (1+2)/3 @> |> reduce |> source;;
val it : string = "3 / 3"
}}}

  * `val reduceFully : Quotations.Expr -> Quotations.Expr list`
{{{
> <@ (1+2)/3 @> |> reduceFully |> List.map source;;
val it : string list = ["(1 + 2) / 3"; "3 / 3"; "1"]
}}}

  * `val isReduced : Quotations.Expr -> bool`
{{{
> <@ (1+2)/3 @> |> isReduced;;
val it : bool = false
> <@ 1 @> |> isReduced;;
val it : bool = true
}}}

  * `val unquote : Quotations.Expr -> unit`
{{{
> unquote <@ (1+2)/3 @>;;

(1 + 2) / 3
3 / 3
1

val it : unit = ()
}}}

The following are functions which accept a variable environment for processing synthetic expressions with unbound variables:

  * `val evalWith : Quotations.Expr<'a> -> (string * obj ref) list -> 'a`
  * `val evalRawWith : Quotations.Expr -> (string * obj ref) list -> obj`
  * `val reduceWith : Quotations.Expr -> (string * obj ref) list -> Quotations.Expr`
  * `val reduceFullyWith : Quotations.Expr -> (string * obj ref) list -> Quotations.Expr list`

=== Extensions ===

The `Swensen.Unquote.Extensions` module duplicates functions in the `Swensen.Unquote.Operators` as instance type extensions on `Quotations.Expr` and `Quotations.Expr<'a>`. But it also includes an instance property extension on `System.Type`, `FSharpName`, which returns the F#-style signature of a type:

{{{
> typeof<int>.FSharpName;;
val it : string = "int"
> typeof<int[]>.FSharpName;;
val it : string = "int[]"
> typeof<int[,,,]>.FSharpName;;
val it : string = "int[,,,]"
> typeof<System.Collections.Generic.Dictionary<string, float>>.FSharpName;;
val it : string = "Dictionary<string, float>"
> typeof<unit -> int -> string>.FSharpName;;
val it : string = "unit -> int -> string"
> typeof<unit -> (float -> int) -> string>.FSharpName;;
val it : string = "unit -> (float -> int) -> string"
> typeof<int * float * string>.FSharpName;;
val it : string = "int * float * string"
> typeof<int * (bool * float) * string>.FSharpName;;
val it : string = "int * (bool * float) * string"
> typeof<int -> (list<(int * (int -> string))[]> * string[,,])>.FSharpName;;
val it : string = "int -> list<(int * (int -> string))[]> * string[,,]"
}}}